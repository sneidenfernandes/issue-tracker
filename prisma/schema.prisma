// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectMemberships  ProjectMembership[]
  creater   Issue[]
  issueMembership  IssueMembership[]
}

enum ProjectStatus {
  BACKLOG
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  NO_PRIORITY
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum IssueStatus {
  TODO
  BACKLOG
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELED
  DUPLICATE
}

enum IssueLabel {
  BUG
  FEATURE
  IMPROVEMENT
}

model Project {
  id              String @id @default(cuid())
  description     String   
  status          ProjectStatus @default(PLANNED)
  projectPriority ProjectPriority @default(NO_PRIORITY)
  userMemberships ProjectMembership[]
  createdDate     DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  startDate       DateTime?   
  completedDate   DateTime?   
  targetDate      DateTime?


}


model Issue {
  id            String @id @default(cuid())
  description   String
  createrId     String
  creater       User @relation(fields: [createrId], references: [id])
  issueMembership        IssueMembership[]
  
  
}

model IssueMembership {
  createrId   String
  creater     User @relation(fields: [createrId], references: [id])
  issueId     String
  issue       Issue @relation(fields: [issueId], references: [id])

  @@id([createrId, issueId])
}


model ProjectMembership {
  adminId   String
  admin     User   @relation(fields: [adminId], references: [id])
  projectId String
  project   Project @relation(fields:[projectId], references: [id])
  @@id([adminId,projectId]) 
}


 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@id([userId, credentialID])
}